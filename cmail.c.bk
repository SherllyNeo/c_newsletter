#include <stdio.h>
#include <stdlib.h>
#include <mysql/mysql.h>
#include <string.h>
#include <curl/curl.h>

struct Email_Sub {
	char* Temp;
	char* FirstName;
	char* LastName;
	char* AdditionalText;
	char* Email;
};
struct upload_status {
  size_t bytes_read;
};

char payload_text[1000];


static size_t payload_source(char *ptr,size_t size,size_t nmemb,void *userp) {
struct upload_status *upload_ctx = (struct upload_status *)userp;
const char *data;
  size_t room = size * nmemb;

  if((size == 0) || (nmemb == 0) || ((size*nmemb) < 1)) {
    return 0;
  }

  data = &payload_text[upload_ctx->bytes_read];

  if(data) {
    size_t len = strlen(data);
    if(room < len)
      len = room;
    memcpy(ptr, data, len);
    upload_ctx->bytes_read += len;

    return len;
  }

  return 0;

}

void send_email(struct Email_Sub email_sub) {
	printf("\nsending email for --> Email: %s ,First Name: %s, Last Name: %s, Additonal Text: %s, Template: %s\n",email_sub.Email,email_sub.FirstName,email_sub.LastName,email_sub.AdditionalText,email_sub.Temp);
	/* constant values */
	char* from_email = "<app@sherllymail.com>";
	char* from = "Sherlly's App <App@sherllymail.com>";
	char* cc_addr = "Jacob <jacob@sherllymail.com>";

	char to_email[30];
	char to[30];
	char subject[30];
	char body[50];
	sprintf(to_email,"<%s>",email_sub.Email);
	sprintf(to,"%s %s <%s>",email_sub.FirstName,email_sub.LastName,email_sub.Email);
	if (strncmp("fact_app",email_sub.Temp,9) == 0) {
		sprintf(subject,"Sherlly's Fact app for %s",email_sub.FirstName);
		sprintf(body,"Test fact app message: \n %s",email_sub.AdditionalText);
	}
	else {
	/* Default */
		sprintf(subject,"Error finding email sub type for %s",email_sub.FirstName);
		sprintf(body,"Please contact jacob@sherllymail for help");

	}

	sprintf(payload_text,"To: %s \nFrom: %s \nCc: %s \nSubject: %s \n\n %s \n\n \n ",to,from,cc_addr,subject,body);



	CURL *curl;
	CURLcode res_ = CURLE_OK;
	struct curl_slist *recipients = NULL;
	struct upload_status upload_ctx = { 0 };

	curl = curl_easy_init();
	  if(curl) {
	    curl_easy_setopt(curl, CURLOPT_USERNAME, "app@sherllymail.com");
	    curl_easy_setopt(curl, CURLOPT_PASSWORD, "AppPassword@@1998");

	    curl_easy_setopt(curl, CURLOPT_URL, "smtp://mail.sherllymail.com:587");

	    curl_easy_setopt(curl,CURLOPT_USE_SSL,(long)CURLUSESSL_ALL);

	    curl_easy_setopt(curl, CURLOPT_MAIL_FROM, from_email);

	    recipients = curl_slist_append(recipients, to_email);
	    recipients = curl_slist_append(recipients, to_email);
	    curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients);
	    curl_easy_setopt(curl, CURLOPT_READFUNCTION, payload_source);
	    curl_easy_setopt(curl, CURLOPT_READDATA, &upload_ctx);
	    curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);
	     /* Send the message */
	    res_ = curl_easy_perform(curl);

	    /* Check for errors */
	    if(res_ != CURLE_OK) {
	      fprintf(stderr, "curl_easy_perform() failed: %s\n",
		      curl_easy_strerror(res_));
	    }

	    /* Free the list of recipients */
	    curl_slist_free_all(recipients);

	    curl_easy_cleanup(curl);
	  }
}


void get_email_subs(struct Email_Sub* email_sub_array,int* amount_of_subscribers,int size_of_array) {
MYSQL *conn;
MYSQL_RES *res;
MYSQL_ROW row;

const char *server = getenv("DB_HOST");
unsigned int port = atoi(getenv("DB_PORT"));
char *user = "sherlly";
const char *password = getenv("DB_PASS");
char *database = "sherlly_db";

if (server == NULL || password == NULL) {
	fprintf(stderr,"Cannot get connection details for DB");
	exit(1);
}

printf("\nServer: %s, port: %d, Password: %s\n",server,port,password);

conn = mysql_init(NULL);
/* Connect to database */
if (!mysql_real_connect(conn, server,
 user, password, database, port, NULL, 0)) {
fprintf(stderr, "%s\n", mysql_error(conn));
exit(1);
}

/* send SQL query */
if (mysql_query(conn, "SELECT Email,FirstName,LastName,AdditonalText,Template FROM Mailing_list WHERE Active=1")) {
fprintf(stderr, "%s\n", mysql_error(conn));
exit(1);
}

res = mysql_use_result(conn);

int email_sub_count = 0;

/* Collect data */
while ((row = mysql_fetch_row(res)) != NULL) {
	if (email_sub_count > size_of_array) {
		size_of_array *= 2;
		email_sub_array = malloc(size_of_array * sizeof(struct Email_Sub));
	}

	char *email = (char*)malloc(50 * sizeof(char));
	sprintf(email, "%s", row[0]);

	char *firstName = (char*)malloc(50 * sizeof(char));
	sprintf(firstName, "%s", row[1]);

	char *lastName = (char*)malloc(50 * sizeof(char));
	sprintf(lastName, "%s", row[2]);

	char *template = (char*)malloc(50 * sizeof(char));
	sprintf(template, "%s", row[4]);

	char *additionalText = (char*)malloc(50 * sizeof(char));
	sprintf(additionalText, "%s", row[3]);

	struct Email_Sub email_sub = {template,firstName,lastName,additionalText,email};
	email_sub_array[email_sub_count] = email_sub;
	email_sub_count++;

}


/* close connection */
mysql_free_result(res);
mysql_close(conn);

*amount_of_subscribers=email_sub_count;

}

int main() {

	int amount_of_subs=0;
	int* subs = &amount_of_subs;
	int size_of_array = 10;
	struct Email_Sub* email_sub_array = malloc(size_of_array * sizeof(struct Email_Sub));
	get_email_subs(email_sub_array,subs,size_of_array);
	printf("\n%d\n",amount_of_subs);

	for (int i=0; i<amount_of_subs;i++) {
		struct Email_Sub email_sub = email_sub_array[i];

		/* send email */
		send_email(email_sub);
	}



	if (email_sub_array) {
		for (int i=0; i<amount_of_subs;i++) {
		struct Email_Sub email_sub = email_sub_array[i];
		if (email_sub.Email) {
			free(email_sub.Email);
			free(email_sub.Temp);
			free(email_sub.FirstName);
			free(email_sub.LastName);
			free(email_sub.AdditionalText);
		}
		}
		free(email_sub_array);
	}

	return 0;

}

